---
title:  "A Weekly Cognitive Psychology Blog: Week Number Twelve Part II"
author: "C Miller"
date: "2023-12-7"
image: "IMG_1784.JPG"
---

#### Logic

##### Minerva assigns lower values to probes that are "new"

## 1. Create 100 unique feature vectors

## 2. Create a memory that gets the first 50 items as traces in the memory

### mimics the encoding phase

## 3. Conduct a simulation to mimic a memory test. Presenting new and old items as cues and generating responses from the memory

## 4. Evaluate the models' performance to see if it can discriminate between new and old items

```{r, echo=FALSE, include=FALSE}

library(tidyverse)
library(lsa)
library(RsemanticLibrarian)



```

```{r}

vector_length <- 20  #make random feature vectors for each item
num_items <- 100 
# rows are items
#columns are features

```

### A FUNCTION TO GENERATE SETS OF FEATURE VECTORS THAT ARE ALL UNIQUE

```{r}

generate_unique_random_items <- function(num_items = 100, vector_length = 20){
  items <- t(replicate(num_items,
                       sample(rep(c(1,-1), vector_length/2
                                ))))
  
  correlation_matrix <- cor(t(items))
upper_triangle <- correlation_matrix[upper.tri(correlation_matrix)]

  if (length(upper_triangle[upper_triangle == 1]) == 0){
    return(items)
  }   else{
      print(i)
      generate_unique_random_items(num_items, vector_length)
  }
}


```

```{r}

#apply a function over a list or vector 
# use replicate for random number generation?




#sample with or without replacement
items <- items <- generate_unique_random_items(num_items = 100, vector_length = 20)
                     
```

## Memory Matrix

```{r}
#define indices for old and new items
old <- 1:50  # encoding phase "old"
new <-51:100 # the model did not see this sequence from 51-100 of "new items"


#put old items into a memory matrix as above

# hold items in a data frame

simulation_data <- data.frame()

#the memory of the model is a matrix
memory <- items[old,] # the first 50 items

```

#### Get an analysis of how the model responded to new and old items and averages across items.

###### loop over cues

```{r}

for(i in 1:100){
  probe_id <- i
  probe <- items[probe_id,]
  
  #compute similarities
  
  similarities <-
RsemanticLibrarian::cosine_x_to_m(probe, memory)^3
  
  #activate traces by weighted similarity
  
  activations <- memory * c(similarities)
  
  
  # generate echo and global activation
  
  echo <- colSums(activations)
  global_activation <- sum(similarities)
  
  # compare echo to probe
  echo_cue_similarity <- lsa::cosine(probe, echo)
  
  trial_results <- data.frame(item = i, global_activation = global_activation, echo_cue_similarity = echo_cue_similarity)
  
 # per trial when a certain item was the cue how many items were activated what was the global activation
  simulation_data <- rbind(simulation_data, trial_results)
}




```

```{r, echo=FALSE, include=FALSE}


simulation_data <- simulation_data %>%
  mutate(item_type = rep(c("old", "new"), each = 50))


simulation_means <- simulation_data %>%
  group_by(item_type) %>%
  summarize(mean_echo_cue_similarity = mean(echo_cue_similarity), mean_global_activation = mean(global_activation))


knitr::kable(simulation_means)
```


## NOTES

### Anticipated Results
 
#### OLD Items

##### mean echo similarity for old items Should be close to 1

#### mean global activation for old items Should be close to 1

#### New Items

### mean echo similarity for new items should be smaller than mean echo cue similarity of OLD items

### mean global acitvation for new items should be close to zero



##### Old item types with close to 1 mean echo cue similarity with close to 1 mean global activation: each of those items was in the memory system at least one time so should expect at least one item to be strongly activated


##### The echos resemble the cue. The echos are made up of traces in the memory.


##### New traces global activation is low. the items are not exactly the same as the cue for the new item. Mean similarity is not 0, so the cue that the memory has never seen but prompts memory to activate traces but the echo resembles pattern in the cue.

