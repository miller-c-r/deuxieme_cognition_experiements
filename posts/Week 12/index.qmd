---
title:  "A Weekly Cognitive Psychology Blog: Week Number Twelve Part I"
author: "C Miller"
date: "2023-12-7"
---

## Intro to A Minerva Model in R

```{r, echo=FALSE}
library(devtools)
devtools::install_github("CrumpLab/RsemanticLibrarian")
library(lsa)
```

## Section I

```{r}

vector_length <- 10  #make random feature vectors for each item
num_items <- 100 # rows are items , columns are features

```

```{r}

#apply a function over a list or vector 
# use replicate for random number generation?

#sample with or without replacement
items <- t(replicate(num_items,
                     sample( rep(c(1,-1), vector_length / 2)
                     )
))

```

## Memory Matrix

```{r}
#define indices for old and new items
old <- 1:50  # encoding phase "old"
new <-51:100 # the model did not see this sequence from 51-100 of "new items"


#put old items into a memory matrix

#the memory of the model is a matrix
memory <- items[old,] # the first 50 items

```

## get an item to probe memory

```{r}
# each row of the matrix codes a memory trace

#matrix items has 100 items in it

probe_id <- 5 #all items in certain number,, then calculate the similarity to "memory"

probe <- items[probe_id,]

```

### similarity driven retrieval / test phase?

##### Activate memory traces in proportion to their similarities. for each of the rows in the memory matrix, multiply all the values by their similarity to the Q

##### this will create a new matrix of activation. Some numbers have become very small so those memory traces have not been activated.

##### calculate two main output parameters of the matrix

```{r}

#compute similarities

similarities <-
  RsemanticLibrarian::cosine_x_to_m(probe, memory)^5 #computes similarity between one vector and multiple vectors in a matrix

#activate traces by weighted similarity

activations <- memory * c(similarities)

#calculate the echo response and global activation

echo <- colSums(activations)

global_activation <- sum(similarities)

```

##### can compare the pattern for echo to the pattern that was in the probe using lsa cosine function.

##### Range: -1 , 1. Negative 1 is inverse, Zero is no similarity, Positive 1 perfect and positive similarity.

## Compare Echo to Probe

```{r}

lsa::cosine(probe,echo) ## output value is a range from Negative 1 to Positive 1

# is pattern in probe similar to pattern in echo

global_activation


```
