{
  "hash": "e94c7693652b3bb7a6419978e02db4f1",
  "result": {
    "markdown": "---\ntitle:  \"A Weekly Cognitive Psychology Blog: Week Number Twelve\"\nauthor: \"C Miller\"\ndate: \"2023-12-7\"\n---\n\n\n## A Minerva Model in R\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: usethis\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nSkipping install of 'RsemanticLibrarian' from a github remote, the SHA1 (1ae2b5bd) has not changed since last install.\n  Use `force = TRUE` to force installation\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'lsa' was built under R version 4.3.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: SnowballC\n```\n:::\n:::\n\n\n## Section I\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvector_length <- 10  #make random feature vectors for each item\nnum_items <- 100 # rows are items , columns are features\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#apply a function over a list or vector \n# use replicate for random number generation?\n\n#sample with or without replacement\nitems <- t(replicate(num_items,\n                     sample( rep(c(1,-1), vector_length / 2)\n                     )\n))\n```\n:::\n\n\n## Memory Matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#define indices for old and new items\nold <- 1:50  # encoding phase \"old\"\nnew <-51:100 # the model did not see this sequence from 51-100 of \"new items\"\n\n\n#put old items into a memory matrix\n\n#the memory of the model is a matrix\nmemory <- items[old,] # the first 50 items\n```\n:::\n\n\n## get an item to probe memory\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# each row of the matrix codes a memory trace\n\n#matrix items has 100 items in it\n\nprobe_id <- 53 #all items in certain number,, then calculate the similarity to \"memory\"\n\nprobe <- items[probe_id,]\n```\n:::\n\n\n### similarity driven retrieval / test phase?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#compute similarities\n\nsimilarities <-\n  RsemanticLibrarian::cosine_x_to_m(probe, memory)^5 #computes similarity between one vector and mutiple vectors in a matrix\n\n#activate traces by weighted similarity\n\nactivations <- memory * c(similarities)\n\n#calculate the echo response and global activation\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}