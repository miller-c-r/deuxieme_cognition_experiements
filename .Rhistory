labs(
title="Picture-Word Interference Trial One",
x="Reaction Time (milliseconds)")+
theme(plot.margin = margin(0.5,0.5,0.5,0.5, "cm"))+
theme_ipsum_tw()
trial_one%>%
mutate(
rt = as.numeric(rt)
)%>%
filter(rt != "null")%>%
filter(image != "NA")%>%
filter(trial_type != "htmlbuttonresponse")%>%
filter(correct != "NA") %>%
ggplot(aes(rt))+
geom_histogram(binwidth=20, fill= "#69b3a2")+
#scale_fill_viridis(discrete=FALSE, alpha=0.6, option="A")+
scale_x_continuous(n.breaks=20)+
labs(
title="Picture-Word Interference Trial One",
x="Reaction Time (milliseconds)")+
theme(plot.margin = margin(0.5,0.5,0.5,0.5, "cm"))+
theme_foundation()
trial_one%>%
mutate(
rt = as.numeric(rt)
)%>%
filter(rt != "null")%>%
filter(image != "NA")%>%
filter(trial_type != "htmlbuttonresponse")%>%
filter(correct != "NA") %>%
ggplot(aes(rt))+
geom_histogram(binwidth=20, fill= "#69b3a2")+
#scale_fill_viridis(discrete=FALSE, alpha=0.6, option="A")+
scale_x_continuous(n.breaks=20)+
labs(
title="Picture-Word Interference Trial One",
x="Reaction Time (milliseconds)")+
theme(plot.margin = margin(0.5,0.5,0.5,0.5, "cm"))+
theme_economist()
trial_one%>%
mutate(
rt = as.numeric(rt)
)%>%
filter(rt != "null")%>%
filter(image != "NA")%>%
filter(trial_type != "htmlbuttonresponse")%>%
filter(correct != "NA") %>%
ggplot(aes(rt))+
geom_histogram(binwidth=20, fill= "#69b3a2")+
#scale_fill_viridis(discrete=FALSE, alpha=0.6, option="A")+
scale_x_continuous(n.breaks=10)+
labs(
title="Picture-Word Interference Trial One",
x="Reaction Time (milliseconds)")+
theme(plot.margin = margin(0.5,0.5,0.5,0.5, "cm"))+
theme_economist()
trial_one%>%
mutate(
rt = as.numeric(rt)
)%>%
filter(rt != "null")%>%
filter(image != "NA")%>%
filter(trial_type != "htmlbuttonresponse")%>%
filter(correct != "NA") %>%
ggplot(aes(rt))+
geom_histogram(binwidth=20, fill= "#69b3a2")+
#scale_fill_viridis(discrete=FALSE, alpha=0.6, option="A")+
scale_x_continuous(n.breaks=15)+
labs(
title="Picture-Word Interference Trial One",
x="Reaction Time (milliseconds)")+
theme(plot.margin = margin(0.5,0.5,0.5,0.5, "cm"))+
theme_economist()
trial_one%>%
mutate(
rt = as.numeric(rt)
)%>%
filter(rt != "null")%>%
filter(image != "NA")%>%
filter(trial_type != "htmlbuttonresponse")%>%
filter(correct != "NA") %>%
ggplot(aes(rt))+
geom_histogram(binwidth=20, fill= "#69b3a2")+
#scale_fill_viridis(discrete=FALSE, alpha=0.6, option="A")+
scale_x_continuous(n.breaks=10)+
labs(
title="Picture-Word Interference Trial One",
x="Reaction Time (milliseconds)")+
theme(plot.margin = margin(0.5,0.5,0.5,0.5, "cm"))+
theme_economist()
trial_one%>%
mutate(
rt = as.numeric(rt)
)%>%
filter(rt != "null")%>%
filter(image != "NA")%>%
filter(trial_type != "htmlbuttonresponse")%>%
filter(correct != "NA") %>%
ggplot(aes(rt))+
geom_histogram(binwidth=20, fill= "#69b3a2")+
#scale_fill_viridis(discrete=FALSE, alpha=0.6, option="A")+
scale_x_continuous(n.breaks=10)+
labs(
title="Picture-Word Interference Trial One",
x="Reaction Time (milliseconds)")+
theme(plot.margin = margin(0.5,0.5,0.5,0.5, "cm"))+
theme_tufte()
trial_one%>%
mutate(
rt = as.numeric(rt)
)%>%
filter(rt != "null")%>%
filter(image != "NA")%>%
filter(trial_type != "htmlbuttonresponse")%>%
filter(correct != "NA") %>%
ggplot(aes(rt))+
geom_histogram(binwidth=20, fill= "#69b3a2")+
#scale_fill_viridis(discrete=FALSE, alpha=0.6, option="A")+
scale_x_continuous(n.breaks=10)+
labs(
title="Picture-Word Interference Trial One",
x="Reaction Time (milliseconds)")+
theme(plot.margin = margin(0.5,0.5,0.5,0.5, "cm"))+
theme_dark()
trial_one%>%
mutate(
rt = as.numeric(rt)
)%>%
filter(rt != "null")%>%
filter(image != "NA")%>%
filter(trial_type != "htmlbuttonresponse")%>%
filter(correct != "NA") %>%
ggplot(aes(rt))+
geom_histogram(binwidth=20, fill= "#69b3a2")+
#scale_fill_viridis(discrete=FALSE, alpha=0.6, option="A")+
scale_x_continuous(n.breaks=10)+
labs(
title="Picture-Word Interference Trial One",
x="Reaction Time (milliseconds)")+
theme(plot.margin = margin(0.5,0.5,0.5,0.5, "cm"))+
theme_void()
trial_one%>%
mutate(
rt = as.numeric(rt)
)%>%
filter(rt != "null")%>%
filter(image != "NA")%>%
filter(trial_type != "htmlbuttonresponse")%>%
filter(correct != "NA") %>%
ggplot(aes(rt))+
geom_histogram(binwidth=20, fill= "#69b3a2")+
#scale_fill_viridis(discrete=FALSE, alpha=0.6, option="A")+
scale_x_continuous(n.breaks=10)+
labs(
title="Picture-Word Interference Trial One",
x="Reaction Time (milliseconds)")+
theme(plot.margin = margin(0.5,0.5,0.5,0.5, "cm"))+
theme_solarized_2()
trial_one%>%
mutate(
rt = as.numeric(rt)
)%>%
filter(rt != "null")%>%
filter(image != "NA")%>%
filter(trial_type != "htmlbuttonresponse")%>%
filter(correct != "NA") %>%
ggplot(aes(rt))+
geom_histogram(binwidth=20, fill= "#69b3a2")+
#scale_fill_viridis(discrete=FALSE, alpha=0.6, option="A")+
scale_x_continuous(n.breaks=10)+
labs(
title="Histogram Picture-Word Interference Trial One",
x="Reaction Time (milliseconds)")+
theme(plot.margin = margin(0.5,0.5,0.5,0.5, "cm"))+
theme_solarized_2()
trial_one%>%
mutate(
rt = as.numeric(rt)
)%>%
filter(rt != "null")%>%
filter(image != "NA")%>%
filter(trial_type != "htmlbuttonresponse")%>%
filter(correct != "NA") %>%
ggplot(aes(congruency, rt, color=rt))+
geom_boxplot()+
geom_jitter(color="#35b", size=0.4, alpha=0.9)+
scale_fill_viridis(discrete=TRUE, alpha=0.6, option="A")+
labs(
title="Picture-Word Interference Trial One",
x="Congruency",
y="Reaction Time (milliseconds)")+
theme(plot.margin = margin(0.5,0.5,0.5,0.5, "cm"))
trial_one%>%
mutate(
rt = as.numeric(rt)
)%>%
filter(rt != "null")%>%
filter(image != "NA")%>%
filter(trial_type != "htmlbuttonresponse")%>%
filter(correct != "NA") %>%
ggplot(aes(congruency, rt, color=rt))+
geom_boxplot()+
geom_jitter(color="red", size=0.4, alpha=0.9)+
scale_fill_viridis(discrete=TRUE, alpha=0.6, option="A")+
labs(
title="Picture-Word Interference Trial One",
x="Congruency",
y="Reaction Time (milliseconds)")+
theme(plot.margin = margin(0.5,0.5,0.5,0.5, "cm"))
trial_one%>%
mutate(
rt = as.numeric(rt)
)%>%
filter(rt != "null")%>%
filter(image != "NA")%>%
filter(trial_type != "htmlbuttonresponse")%>%
filter(correct != "NA") %>%
ggplot(aes(congruency, rt))+
geom_boxplot()+
geom_jitter(color="purple", size=0.9, alpha=0.9)+
scale_fill_viridis(discrete=TRUE, alpha=0.6, option="A")+
labs(
title="Picture-Word Interference Trial One",
x="Congruency",
y="Reaction Time (milliseconds)")+
theme(plot.margin = margin(0.5,0.5,0.5,0.5, "cm"))
trial_data <-trial_one%>%
mutate(
rt = as.numeric(rt)
)%>%
filter(rt != "null")%>%
filter(image != "NA")%>%
filter(trial_type != "htmlbuttonresponse")%>%
filter(correct != "NA") %>%
group_by(congruency)%>%
summarise(
n=n(),
mean=mean(congruency),
sd=sd(congruency))%>%
mutate(se=sd/sqrt(n)) %>%
mutate(ic=se + qt((1-0.05)/2+ .5, n-1))
ggplot(aes(rt))+
geom_histogram(binwidth=20, fill= "#69b3a2")+
#scale_fill_viridis(discrete=FALSE, alpha=0.6, option="A")+
scale_x_continuous(n.breaks=10)+
labs(
title="Histogram Picture-Word Interference Trial One",
x="Reaction Time (milliseconds)")+
theme(plot.margin = margin(0.5,0.5,0.5,0.5, "cm"))+
theme_solarized_2()
trial_data <-trial_one%>%
mutate(
rt = as.numeric(rt)
)%>%
filter(rt != "null")%>%
filter(image != "NA")%>%
filter(trial_type != "htmlbuttonresponse")%>%
filter(correct != "NA") %>%
summarise(
n=n(),
mean=mean(congruency),
sd=sd(congruency))%>%
mutate(se=sd/sqrt(n)) %>%
mutate(ic=se + qt((1-0.05)/2+ .5, n-1))
ggplot(aes(rt))+
geom_histogram(binwidth=20, fill= "#69b3a2")+
#scale_fill_viridis(discrete=FALSE, alpha=0.6, option="A")+
scale_x_continuous(n.breaks=10)+
labs(
title="Histogram Picture-Word Interference Trial One",
x="Reaction Time (milliseconds)")+
theme(plot.margin = margin(0.5,0.5,0.5,0.5, "cm"))+
theme_solarized_2()
trial_data <-trial_one%>%
mutate(
rt = as.numeric(rt)
)%>%
filter(rt != "null")%>%
filter(image != "NA")%>%
filter(trial_type != "htmlbuttonresponse")%>%
filter(correct != "NA") %>%
summarise(
n=n(),
mean=mean(congruency),
sd=sd(congruency))%>%
mutate(se=sd/sqrt(n)) %>%
mutate(ic=se + qt((1-0.05)/2+ .5, n-1))
ggplot(trial_data)+
geom_bar(aes(x=congruency, y=mean), stat="identity", fill="forestgreen", alpha=0.5)+
geom_errorbar(aes(x=congruency, ymin=mean-sd, ymax=mean), width =0.4, colour="red", alpha=0.9, size=1.5)+
labs(
title="Histogram Picture-Word Interference Trial One",
x="Reaction Time (milliseconds)")+
theme(plot.margin = margin(0.5,0.5,0.5,0.5, "cm"))+
theme_solarized_2()
trial_data <-trial_one%>%
mutate(
rt = as.numeric(rt)
)%>%
filter(rt != "null")%>%
filter(image != "NA")%>%
filter(trial_type != "htmlbuttonresponse")%>%
filter(correct != "NA") %>%
summarise(
n=n(),
mean=mean(congruency),
sd=sd(congruency))%>%
mutate(se=sd/sqrt(n)) %>%
mutate(ic=se + qt((1-0.05)/2+ .5, n-1))
trial_one %>%
ggplot(trial_data)+
geom_bar(aes(x=congruency, y=mean), stat="identity", fill="forestgreen", alpha=0.5)+
geom_errorbar(aes(x=congruency, ymin=mean-sd, ymax=mean), width =0.4, colour="red", alpha=0.9, size=1.5)+
labs(
title="Histogram Picture-Word Interference Trial One",
x="Reaction Time (milliseconds)")+
theme(plot.margin = margin(0.5,0.5,0.5,0.5, "cm"))+
theme_solarized_2()
trial_data <-trial_one%>%
mutate(
rt = as.numeric(rt)
)%>%
filter(rt != "null")%>%
filter(image != "NA")%>%
filter(trial_type != "htmlbuttonresponse")%>%
filter(correct != "NA") %>%
summarise(
n=n(),
mean=mean(congruency),
sd=sd(congruency))%>%
mutate(se=sd/sqrt(n)) %>%
mutate(ic=se + qt((1-0.05)/2+ .5, n-1)) %>%
ggplot(trial_data)+
geom_bar(aes(x=congruency, y=mean), stat="identity", fill="forestgreen", alpha=0.5)+
geom_errorbar(aes(x=congruency, ymin=mean-sd, ymax=mean), width =0.4, colour="red", alpha=0.9, size=1.5)+
labs(
title="Histogram Picture-Word Interference Trial One",
x="Reaction Time (milliseconds)")+
theme(plot.margin = margin(0.5,0.5,0.5,0.5, "cm"))+
theme_solarized_2()
trial_data
View(trial_data)
View(trial_one)
rio::export(file_names, 'posts/Week6/images/stimuli.js', format ='JSON')
source("C:/Users/chant/OneDrive/Desktop/semester_fall_2023/cognition_lab/deuxieme_cognition_experiements/posts/Week6/resources.R")
list.files("posts/Week6/images")
file_names <- list.files("posts/Week6/images")
rio::export(file_names, 'posts/Week6/images/stimuli.js', format ='JSON')
file_names <- list.files("posts/Week6/images")
rio::export(file_names, 'posts/Week6/images/stimuli.js', format ='JSON')
file_names <- list.files("posts/Week6/images/EXEMPLAR")
rio::export(file_names, 'posts/Week6/images/stimuli.js', format ='JSON')
file_names <- list.files("posts/Week6/images/")
rio::export(file_names, 'posts/Week6/images/stimuli.js', format ='JSON')
file_names <- list.files("posts/Week6/images/")
rio::export(file_names, 'posts/Week6/images/stimuli.js', format ='JSON')
rio::export(file_names, 'posts/Week6/images/stimuli.js', format ='JSON')
file_names <- list.files("posts/Week6/images")
rio::export(file_names, 'posts/Week6/images/stimuli.js', format ='JSON')
file_names <- list.files("posts/Week6/images")
rio::export(file_names, 'posts/Week6/images/stimuli.js', format ='JSON')
rio::export(file_names, 'posts/Week6/images/stimuli.js', format ='JSON')
[Excel File with MINERVA Tutorial?](minerva_cmiller.xlsx)
library(devtools)
devtools::install_github("CrumpLab/RsemanticLibrarian")
library(lsa)
vector_length <- 10  #make random feature vectors for each item
num_items <- 100 # rows are items , columns are features
#apply a function over a list or vector
# use replicate for random number generation?
#sample with or without replacement
items <- t(replicate(num_items,
sample( rep(c(1,-1), vector_length / 2)
)
))
library(devtools)
devtools::install_github("CrumpLab/RsemanticLibrarian")
library(lsa)
vector_length <- 10  #make random feature vectors for each item
num_items <- 100 # rows are items , columns are features
#apply a function over a list or vector
# use replicate for random number generation?
#sample with or without replacement
items <- t(replicate(num_items,
sample( rep(c(1,-1), vector_length / 2)
)
))
#define indices for old and new items
old <- 1:50
new <-51:100
#put old itsms in a memory matrix
memory <- items[old,]
rep(1,5)
View(items)
library(devtools)
devtools::install_github("CrumpLab/RsemanticLibrarian")
library(lsa)
vector_length <- 10  #make random feature vectors for each item
num_items <- 100 # rows are items , columns are features
#apply a function over a list or vector
# use replicate for random number generation?
#sample with or without replacement
items <- t(replicate(num_items,
sample( rep(c(1,-1), vector_length / 2)
)
))
#define indices for old and new items
old <- 1:50
new <-51:100
#put old items into a memory matrix
memory <- items[old,]
probe_id <- 53
probe <- items[probe_id,]
library(devtools)
devtools::install_github("CrumpLab/RsemanticLibrarian")
library(lsa)
vector_length <- 10  #make random feature vectors for each item
num_items <- 100 # rows are items , columns are features
#apply a function over a list or vector
# use replicate for random number generation?
#sample with or without replacement
items <- t(replicate(num_items,
sample( rep(c(1,-1), vector_length / 2)
)
))
#define indices for old and new items
old <- 1:50
new <-51:100
#put old items into a memory matrix
memory <- items[old,]
probe_id <- 53
probe <- items[probe_id,]
items[1,]
items[2]
items[3,]
library(devtools)
devtools::install_github("CrumpLab/RsemanticLibrarian")
library(lsa)
vector_length <- 10  #make random feature vectors for each item
num_items <- 100 # rows are items , columns are features
#apply a function over a list or vector
# use replicate for random number generation?
#sample with or without replacement
items <- t(replicate(num_items,
sample( rep(c(1,-1), vector_length / 2)
)
))
#define indices for old and new items
old <- 1:50  # encoding phase "old"
new <-51:100 # the model did not see this sequence from 51-100 of "new items"
#put old items into a memory matrix
#the memory of the model is a matrix
memory <- items[old,] # the first 50 items
# each row of the matrix codes a memory trace
#matrix items has 100 items in it
probe_id <- 53
probe <- items[probe_id,]
library(devtools)
devtools::install_github("CrumpLab/RsemanticLibrarian")
library(lsa)
vector_length <- 10  #make random feature vectors for each item
num_items <- 100 # rows are items , columns are features
#apply a function over a list or vector
# use replicate for random number generation?
#sample with or without replacement
items <- t(replicate(num_items,
sample( rep(c(1,-1), vector_length / 2)
)
))
#define indices for old and new items
old <- 1:50  # encoding phase "old"
new <-51:100 # the model did not see this sequence from 51-100 of "new items"
#put old items into a memory matrix
#the memory of the model is a matrix
memory <- items[old,] # the first 50 items
# each row of the matrix codes a memory trace
#matrix items has 100 items in it
probe_id <- 53
probe <- items[probe_id,]
#compute similarities
similarities <-
RsemanticLibrarian::cosine_x_to_m(probe, memory)^5
#activate traces by weighted similarity
activations <- memory * c(similarities)
library(devtools)
devtools::install_github("CrumpLab/RsemanticLibrarian")
library(lsa)
vector_length <- 10  #make random feature vectors for each item
num_items <- 100 # rows are items , columns are features
#apply a function over a list or vector
# use replicate for random number generation?
#sample with or without replacement
items <- t(replicate(num_items,
sample( rep(c(1,-1), vector_length / 2)
)
))
#define indices for old and new items
old <- 1:50  # encoding phase "old"
new <-51:100 # the model did not see this sequence from 51-100 of "new items"
#put old items into a memory matrix
#the memory of the model is a matrix
memory <- items[old,] # the first 50 items
# each row of the matrix codes a memory trace
#matrix items has 100 items in it
probe_id <- 53 #all items in certain number,, then calculate the similarity to "memory"
probe <- items[probe_id,]
#compute similarities
similarities <-
RsemanticLibrarian::cosine_x_to_m(probe, memory)^5
#activate traces by weighted similarity
activations <- memory * c(similarities)
#calculate the echo response and global activation
